
=== TEST multiline_closure ===
print {
  for i in range(10):
    print(i)
}
=== EXPECTS ===
print(_closure_1)
=== END ===

=== TEST multiline_closure_immediate_call ===
{
  for i in range(10):
    print(i)
}()
=== EXPECTS ===
_closure_1()
=== END ===

=== TEST singleline_closure ===
{ do_heavy_stuff() }
=== EXPECTS ===
_closure_1
=== END ===

=== TEST singleline_closure_immediate_call ===
{ do_heavy_stuff() }()
=== EXPECTS ===
_closure_1()
=== END ===

=== TEST single_line_dict ===
{ 'hello': 'foobar', random(0, 1): 'eggs' }
=== EXPECTS ===
{ 'hello': 'foobar', random(0, 1): 'eggs' }
=== END ===

=== TEST multiline_dict ===
{
  'hello':
      'foobar', 'spam': Eggs(),
}
=== EXPECTS ===
{
  'hello':
      'foobar', 'spam': Eggs(),
}
=== END ===

=== TEST multiline_dict_with_closure_keys_or_values ===
{
  () -> 10: { print 'Hello, World!' }(),
  'foo': 'bar'
}
=== EXPECTS ===
{
  _closure_1: _closure_2(),
  'foo': 'bar'
}
=== END ===

=== TEST closure_as_argument_1 ===
filter(k -> k == 2, range(10))
=== EXPECTS ==
filter(_closure_1, range(10))
=== END ==

=== TEST closure_as_argument_2 ===
do_something({ return True }, range(10))
=== EXPECTS ==
do_something(_closure_1, range(10))
=== END ==

=== TEST assign_closure ===
def myfunc = (project) -> {
  class MyTask(Task):
    pass
  project.add_extension('mytask', MyTask)
}
=== EXPECTS ===
_def_myfunc = _closure_1
=== END ===
