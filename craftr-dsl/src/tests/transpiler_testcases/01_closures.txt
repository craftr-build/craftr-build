
=== TEST nested_closures ===
project.buildscripts[1]('main') {
  for config in configurations:

    my_var = config.get_some_value()
    config.runtime 'my-dependency-name', on_resolve={
      return do_not_resolve(my_var)
    }
}
=== EXPECTS ===
from craftr.core.closure import closure


@closure(__closure__)
def _closure_1(__closure__):
    for config in __closure__['configurations']:
        __closure__['my_var'] = config.get_some_value()

        @closure(__closure__)
        def _closure_1_closure_1(__closure__):
            return __closure__['do_not_resolve'](__closure__['my_var'])
        config.runtime('my-dependency-name', on_resolve=_closure_1_closure_1)


__closure__['project'].buildscripts[1]('main')(_closure_1)
=== END ===


=== TEST multiline_dict_with_closure_keys_or_values ===
{
  () -> 10: { print 'Hello, World!' }(),
  'foo': 'bar'
}
=== EXPECTS ===
from craftr.core.closure import closure


@closure(__closure__)
def _closure_1(__closure__):
    return 10


@closure(__closure__)
def _closure_2(__closure__):
    print('Hello, World!')


{_closure_1: _closure_2(), 'foo': 'bar'}
=== END ===

=== TEST closure_with_arg ===
filter(k -> k == 2, range(10))
=== EXPECTS ===
from craftr.core.closure import closure


@closure(__closure__)
def _closure_1(__closure__, k):
    return k == 2


__closure__['filter'](_closure_1, __closure__['range'](10))
=== END ===
