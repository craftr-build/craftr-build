=== TEST assign_closure ===
def myfunc = (project) -> {

  class MyClass(IConfigurable):
    def __init__(self, task_name):
      self.task_name = task_name
      self.data_files = None
    def configure(self, closure):
      closure.apply(self)
      project.task(self.task_name) {
        do_last {
          print self.task_name, self.data_files
        }
      }
  project.add_extension('mytask', MyClass)
}
=== EXPECTS ===
from craftr.core.closure import closure as __closure_decorator__


@__closure_decorator__(__closure__)
def _closure_1(__closure__, project):


    class MyClass(__closure__['IConfigurable']):

        def __init__(self, task_name):
            self.task_name = task_name
            self.data_files = None

        def configure(self, closure):
            closure.apply(self)

            @__closure_decorator__(__closure__)
            def _closure_1_closure_1(__closure__):

                @__closure_decorator__(__closure__)
                def _closure_1_closure_1_closure_1_closure_1(__closure__):
                    __closure__['print'](self.task_name, self.data_files)
                __closure__['do_last'](_closure_1_closure_1_closure_1_closure_1
                    )
            project.task(self.task_name)(_closure_1_closure_1)
    project.add_extension('mytask', MyClass)


myfunc = _closure_1
=== END ===
