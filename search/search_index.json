{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"If you're looking for the latest stable version of Craftr, check out the 4.x branch. craftr-build Frontend for the Craftr build framework. Requirements Python 3.8+ Getting started Builds in Craftr are described using the Craftr DSL or plain Python in a file called build.craftr or build.craftr.py , respectively. DSL code is transpiled into pure Python code, so everything you can do in the DSL you can also do in Python, though it is usually more convenient to use the DSL. Most commonly, the first thing to do in the build script is to apply a plugin. Plugins provide the means to describe specific build tasks. They do so by registering named extensions to the project object, which in the Craftr DSL is used implicitly to resolve variables. We'll use the cxx plugin to define a build task for a C program and the run plugin to add a non-default task to execute the built program. Craftr DSL Python ```py apply 'cxx' apply 'run' cxx.compile { sources = glob('src/**/*.cpp') produces = 'executable' } run { dependencies.append tasks.compile } ``` ```py project.apply('cxx') project.apply('run') compile_task = project.cxx.compile() compile_task.sources = project.glob('src/**/*.cpp') compile_task.produces = 'executable' compile_task.finalize() run_task = project.run() run_task.dependencies.append(compile_task) run_task.finalize() ``` The build can then be executed using the Craftr CLI. $ craftr run > Task my-project:compile > Task my-project:run Hello, World! Copyright \u00a9 2021 \u2013 Niklas Rosenstein","title":"Home"},{"location":"#craftr-build","text":"Frontend for the Craftr build framework. Requirements Python 3.8+","title":"craftr-build"},{"location":"#getting-started","text":"Builds in Craftr are described using the Craftr DSL or plain Python in a file called build.craftr or build.craftr.py , respectively. DSL code is transpiled into pure Python code, so everything you can do in the DSL you can also do in Python, though it is usually more convenient to use the DSL. Most commonly, the first thing to do in the build script is to apply a plugin. Plugins provide the means to describe specific build tasks. They do so by registering named extensions to the project object, which in the Craftr DSL is used implicitly to resolve variables. We'll use the cxx plugin to define a build task for a C program and the run plugin to add a non-default task to execute the built program. Craftr DSL Python ```py apply 'cxx' apply 'run' cxx.compile { sources = glob('src/**/*.cpp') produces = 'executable' } run { dependencies.append tasks.compile } ``` ```py project.apply('cxx') project.apply('run') compile_task = project.cxx.compile() compile_task.sources = project.glob('src/**/*.cpp') compile_task.produces = 'executable' compile_task.finalize() run_task = project.run() run_task.dependencies.append(compile_task) run_task.finalize() ``` The build can then be executed using the Craftr CLI. $ craftr run > Task my-project:compile > Task my-project:run Hello, World! Copyright \u00a9 2021 \u2013 Niklas Rosenstein","title":"Getting started"},{"location":"api-documentation/craftr.build.lib.helpers/","text":"","title":"craftr.build.lib.helpers"},{"location":"api-documentation/craftr.build.lib.interfaces.native/","text":"craftr.build.lib.interfaces.native ExecutableInfo Objects @dataclass class ExecutableInfo() filename The path to the executable file. dependencies A list of files or directories that are considered required dependencies for the executable. The paths must already be in their expected arrangement relative to the executable file. invokation_layout An optional list of command-line arguments to use when invoking the executable. The first argument in this list is the program that will actually be executed. If set, the filename should usually be included in this list of arguments one way or another. If not set, it is assumed that the filename is executable directly. NativeLibInfo Objects @dataclass class NativeLibInfo() name Simple readable name of the native library. library_files A list of filenames for the native library. library_search_paths A list of library search paths: library_names A list of library names from the search paths. include_paths Public include directories for using the library. defines Defines for using the library. compiler_flags A list of compiler flags. linker_flags A list of linker flags.","title":"craftr.build.lib.interfaces.native"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#craftrbuildlibinterfacesnative","text":"","title":"craftr.build.lib.interfaces.native"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#executableinfo-objects","text":"@dataclass class ExecutableInfo()","title":"ExecutableInfo Objects"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#filename","text":"The path to the executable file.","title":"filename"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#dependencies","text":"A list of files or directories that are considered required dependencies for the executable. The paths must already be in their expected arrangement relative to the executable file.","title":"dependencies"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#invokation_layout","text":"An optional list of command-line arguments to use when invoking the executable. The first argument in this list is the program that will actually be executed. If set, the filename should usually be included in this list of arguments one way or another. If not set, it is assumed that the filename is executable directly.","title":"invokation_layout"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#nativelibinfo-objects","text":"@dataclass class NativeLibInfo()","title":"NativeLibInfo Objects"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#name","text":"Simple readable name of the native library.","title":"name"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#library_files","text":"A list of filenames for the native library.","title":"library_files"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#library_search_paths","text":"A list of library search paths:","title":"library_search_paths"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#library_names","text":"A list of library names from the search paths.","title":"library_names"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#include_paths","text":"Public include directories for using the library.","title":"include_paths"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#defines","text":"Defines for using the library.","title":"defines"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#compiler_flags","text":"A list of compiler flags.","title":"compiler_flags"},{"location":"api-documentation/craftr.build.lib.interfaces.native/#linker_flags","text":"A list of linker flags.","title":"linker_flags"},{"location":"api-documentation/craftr.build.loader/","text":"craftr.build.loader","title":"craftr.build.loader"},{"location":"api-documentation/craftr.build.loader/#craftrbuildloader","text":"","title":"craftr.build.loader"},{"location":"plugins/craftr.build.plugins.cxx/","text":"","title":"craftr.build.plugins.cxx"},{"location":"plugins/craftr.build.plugins.haskell/","text":"","title":"craftr.build.plugins.haskell"},{"location":"plugins/craftr.build.plugins.ocaml/","text":"","title":"craftr.build.plugins.ocaml"},{"location":"plugins/craftr.build.plugins.processor/","text":"","title":"craftr.build.plugins.processor"},{"location":"plugins/craftr.build.plugins.run/","text":"","title":"craftr.build.plugins.run"}]}